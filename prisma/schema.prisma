// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  phone      String?
  ADMIN      Boolean  @default(false)
  PACIENT    Boolean  @default(false)
  DOCTOR     Boolean  @default(false)
  ADMESTAB   Boolean  @default(false)
  ADMUSERS   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Specific relationships for each type of user
  doctor  Doctor?
  clinic  Clinic?  @relation(fields: [clinic_id], references: [id])
  patient Patient?

  ClinicUser ClinicUser[]
  clinic_id  Int?
}

model Patient {
  id            Int      @id @default(autoincrement())
  name          String
  profile_pic   String?
  birthday_date DateTime @db.Date

  zipCode           String // 'cep' em português
  UF                String
  city              String
  state             String
  street            String
  number            String
  complement        String?
  reference_address String

  whatsapp   String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamptz(3)
  // Relationship with User
  sex        Sex       @relation(fields: [sex_id], references: [id])
  sex_id     Int
  user       User      @relation(fields: [user_id], references: [id])
  user_id    Int       @unique
}

model Doctor {
  id                  Int     @id @default(autoincrement())
  name                String
  profile_pic         String?
  registration_number String?
  about_me            String?

  zipCode           String // 'cep' em português
  UF                String
  city              String
  state             String
  street            String
  number            String
  complement        String?
  reference_address String

  whatsapp  String?
  facebook  String?
  instagram String?
  linkedin  String?

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @db.Timestamptz(3)

  // Relationship with User
  user    User @relation(fields: [user_id], references: [id])
  user_id Int  @unique
  sex     Sex  @relation(fields: [sex_id], references: [id])
  sex_id  Int

  Clinics       DoctorClinic[]
  Specialties   SpecialtyDoctor[]
  Education     Education[]
  Experience    Experience[]
  DoctorPlan    DoctorPlan[]
  Certificate   Certificate[]
  DoctorDisease DoctorDisease[]
}

model Certificate {
  id   Int    @id @default(autoincrement())
  name String

  doctor    Doctor? @relation(fields: [doctor_id], references: [id])
  doctor_id Int?
}

model Clinic {
  id       Int     @id @default(autoincrement())
  name     String
  email    String
  phone    String
  cnpj     String?
  photo_01 String?
  photo_02 String?
  photo_03 String?
  video    String?
  about_me String?
  // Relationship with User

  Doctors    DoctorClinic[]
  ClinicUser ClinicUser[]
  User       User[]
}

model DoctorDisease {
  doctor     Doctor  @relation(fields: [doctor_id], references: [id])
  doctor_id  Int
  disease    Disease @relation(fields: [disease_id], references: [id])
  disease_id Int

  @@unique([doctor_id, disease_id])
}

model Specialty {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  Doctors  SpecialtyDoctor[]
  Diseases Disease[]
}

model Disease {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  description   String?
  specialty     Specialty       @relation(fields: [specialty_id], references: [id])
  specialty_id  Int
  DoctorDisease DoctorDisease[]
}

model Education {
  id          Int    @id @default(autoincrement())
  name        String
  institution String

  // Relationship with Doctor
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
}

model Experience {
  id          Int    @id @default(autoincrement())
  name        String
  institution String

  // Relationship with Doctor
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
}

model Plan {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  DoctorPlan DoctorPlan[]
}

model DoctorPlan {
  id        Int    @id @default(autoincrement())
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
  plan      Plan   @relation(fields: [plan_id], references: [id])
  plan_id   Int
}

// Association table to relate doctors and clinics (many to many)
model DoctorClinic {
  id        Int    @id @default(autoincrement())
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
  clinic    Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id Int

  @@unique([doctor_id, clinic_id]) // Ensures that the same association does not occur twice
}

model ClinicUser {
  clinic_id Int
  userId    Int
  role      String // Exemplo: "admin" ou "clinicAdmin"

  clinic Clinic @relation(fields: [clinic_id], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([clinic_id, userId]) // Chave primária composta
}

model SpecialtyDoctor {
  specialty    Specialty @relation(fields: [specialty_id], references: [id])
  specialty_id Int

  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int

  average_appointment_duration Int @default(30) //Tempo_Medio_consulta

  @@id([doctor_id, specialty_id]) // Ensures that the same association does not occur twice
}

model Sex {
  id      Int       @id @default(autoincrement())
  name    String
  Patient Patient[]
  Doctor  Doctor[]
}
