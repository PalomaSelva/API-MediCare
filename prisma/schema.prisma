// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  name         String?
  email        String      @unique
  password     String
  phone        String?
  profile_pic  String?
  profile_type ProfileType // Defines the type of user (doctor, clinic, patient)

  // Specific relationships for each type of user
  doctor      Doctor?
  clinic      Clinic?       @relation(fields: [clinic_id], references: [id])
  patient     Patient?
  SocialMedia SocialMedia[]
  Address     Address?
  ClinicUser  ClinicUser[]
  clinic_id   Int?
}

model Doctor {
  id                  Int               @id @default(autoincrement())
  registration_number String?
  photo_01            String?
  photo_02            String?
  photo_03            String?
  video               String?
  about_me            String?
  // Relationship with User
  user                User              @relation(fields: [user_id], references: [id])
  user_id             Int               @unique
  Clinics             DoctorClinic[]
  Specialties         SpecialtyDoctor[]
  Education           Education[]
  Experience          Experience[]
  DoctorPlan          DoctorPlan[]
}

model Clinic {
  id    Int     @id @default(autoincrement())
  name  String
  email String
  phone String
  cnpj  String?

  // Relationship with User

  Doctors    DoctorClinic[]
  ClinicUser ClinicUser[]
  User       User[]
  Address    Address?
}

model Patient {
  id Int @id @default(autoincrement())

  // Relationship with User
  user    User @relation(fields: [user_id], references: [id])
  user_id Int  @unique
}

model Address {
  id         Int     @id @default(autoincrement())
  zipCode    String // 'cep' em português
  city       String
  state      String
  street     String
  number     String
  complement String?

  user    User @relation(fields: [user_id], references: [id])
  user_id Int  @unique

  clinic    Clinic? @relation(fields: [clinic_id], references: [id])
  clinic_id Int?    @unique
}

model Specialty {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  Doctors  SpecialtyDoctor[]
  Diseases Disease[]
}

model SocialMedia {
  id       Int             @id @default(autoincrement())
  platform SocialMediaType
  url      String
  user     User            @relation(fields: [user_id], references: [id])
  user_id  Int
}

model Disease {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  description  String?
  specialty    Specialty @relation(fields: [specialty_id], references: [id])
  specialty_id Int
}

model Education {
  id          Int    @id @default(autoincrement())
  name        String
  institution String

  // Relationship with Doctor
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
}

model Experience {
  id          Int    @id @default(autoincrement())
  name        String
  institution String

  // Relationship with Doctor
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
}

model Plan {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  DoctorPlan DoctorPlan[]
}

model DoctorPlan {
  id        Int    @id @default(autoincrement())
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
  plan      Plan   @relation(fields: [plan_id], references: [id])
  plan_id   Int
}

// Association table to relate doctors and clinics (many to many)
model DoctorClinic {
  id        Int    @id @default(autoincrement())
  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int
  clinic    Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id Int

  @@unique([doctor_id, clinic_id]) // Ensures that the same association does not occur twice
}

model ClinicUser {
  clinic_id Int
  userId    Int
  role      String // Exemplo: "admin" ou "clinicAdmin"

  clinic Clinic @relation(fields: [clinic_id], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([clinic_id, userId]) // Chave primária composta
}

model SpecialtyDoctor {
  specialty    Specialty @relation(fields: [specialty_id], references: [id])
  specialty_id Int

  doctor    Doctor @relation(fields: [doctor_id], references: [id])
  doctor_id Int

  @@id([doctor_id, specialty_id]) // Ensures that the same association does not occur twice
}

// Enum for user type
enum ProfileType {
  doctor
  clinic
  patient
  clinicAdmin
}

enum SocialMediaType {
  whatsapp
  facebook
  linkedin
  youtube
  twitter
}
